// time complexity = O(n lgn);
// auxilary space = O(n)
// stable = true

function mergeSort(nums, s, e) {
    if(s < e) {
        const mid = parseInt((s+e) / 2, 10);
        mergeSort(nums, s, mid);
        mergeSort(nums, mid+1, e);
        
        // merge sorted arrays in O(l + r) i.e O(n)
        merge(nums, s, mid, e);      
    }
}


function merge(nums, s, mid, e) {
    
    const arr1 = nums.slice(s, mid+1);    // slice omits the last one
    const arr2 = nums.slice(mid+1 , e+1);
    
    let p1 = 0; 
    let p2 = 0;
    
    let k = s;
    
    while ((p1 < arr1.length) && (p2 < arr2.length)) {
        if (arr1[p1] < arr2[p2]) {
            nums[k] = arr1[p1];
            p1++;
        } else {
            nums[k] = arr2[p2];
            p2++;
        }
        k++;
    }
    
    while(p1 < arr1.length ) {
        nums[k] = arr1[p1];
        k++;
        p1++;
    }
    
    while(p2 < arr2.length) {
        nums[k] = arr2[p2];
        k++;
        p2++;
    }
}

const nums = [-1,0,1,2,-1,-4];
mergeSort(, 0, nums.length);
